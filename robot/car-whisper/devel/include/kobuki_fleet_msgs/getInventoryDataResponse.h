// Generated by gencpp from file kobuki_fleet_msgs/getInventoryDataResponse.msg
// DO NOT EDIT!


#ifndef KOBUKI_FLEET_MSGS_MESSAGE_GETINVENTORYDATARESPONSE_H
#define KOBUKI_FLEET_MSGS_MESSAGE_GETINVENTORYDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Bool.h>

namespace kobuki_fleet_msgs
{
template <class ContainerAllocator>
struct getInventoryDataResponse_
{
  typedef getInventoryDataResponse_<ContainerAllocator> Type;

  getInventoryDataResponse_()
    : station_height()
    , material_type()
    , brightness()
    , threshold_1()
    , threshold_2()
    , filter_size()
    , filter()
    , laserScan()
    , pose()
    , finished()  {
    }
  getInventoryDataResponse_(const ContainerAllocator& _alloc)
    : station_height(_alloc)
    , material_type(_alloc)
    , brightness(_alloc)
    , threshold_1(_alloc)
    , threshold_2(_alloc)
    , filter_size(_alloc)
    , filter(_alloc)
    , laserScan(_alloc)
    , pose(_alloc)
    , finished(_alloc)  {
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _station_height_type;
  _station_height_type station_height;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _material_type_type;
  _material_type_type material_type;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _brightness_type;
  _brightness_type brightness;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _threshold_1_type;
  _threshold_1_type threshold_1;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _threshold_2_type;
  _threshold_2_type threshold_2;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _filter_size_type;
  _filter_size_type filter_size;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _filter_type;
  _filter_type filter;

   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _laserScan_type;
  _laserScan_type laserScan;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _finished_type;
  _finished_type finished;




  typedef boost::shared_ptr< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getInventoryDataResponse_

typedef ::kobuki_fleet_msgs::getInventoryDataResponse_<std::allocator<void> > getInventoryDataResponse;

typedef boost::shared_ptr< ::kobuki_fleet_msgs::getInventoryDataResponse > getInventoryDataResponsePtr;
typedef boost::shared_ptr< ::kobuki_fleet_msgs::getInventoryDataResponse const> getInventoryDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kobuki_fleet_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'kobuki_fleet_msgs': ['/home/odroid/car-whisper/src/kobuki_fleet/kobuki_fleet_msgs/msg', '/home/odroid/car-whisper/devel/share/kobuki_fleet_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3eea26b6029dfca50717f610b4a7231";
  }

  static const char* value(const ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3eea26b6029dfcaULL;
  static const uint64_t static_value2 = 0x50717f610b4a7231ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kobuki_fleet_msgs/getInventoryDataResponse";
  }

  static const char* value(const ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 station_height\n\
std_msgs/Int16 material_type\n\
std_msgs/Int16 brightness\n\
std_msgs/Int16 threshold_1\n\
std_msgs/Int16 threshold_2\n\
std_msgs/Int16 filter_size\n\
std_msgs/Int16 filter\n\
sensor_msgs/LaserScan laserScan\n\
geometry_msgs/Pose pose\n\
std_msgs/Bool finished\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int16\n\
int16 data\n\
\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
";
  }

  static const char* value(const ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.station_height);
      stream.next(m.material_type);
      stream.next(m.brightness);
      stream.next(m.threshold_1);
      stream.next(m.threshold_2);
      stream.next(m.filter_size);
      stream.next(m.filter);
      stream.next(m.laserScan);
      stream.next(m.pose);
      stream.next(m.finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct getInventoryDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kobuki_fleet_msgs::getInventoryDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "station_height: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.station_height);
    s << indent << "material_type: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.material_type);
    s << indent << "brightness: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.brightness);
    s << indent << "threshold_1: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.threshold_1);
    s << indent << "threshold_2: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.threshold_2);
    s << indent << "filter_size: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.filter_size);
    s << indent << "filter: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.filter);
    s << indent << "laserScan: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.laserScan);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "finished: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOBUKI_FLEET_MSGS_MESSAGE_GETINVENTORYDATARESPONSE_H
