// Generated by gencpp from file kobuki_fleet_msgs/NewTask.msg
// DO NOT EDIT!


#ifndef KOBUKI_FLEET_MSGS_MESSAGE_NEWTASK_H
#define KOBUKI_FLEET_MSGS_MESSAGE_NEWTASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kobuki_fleet_msgs
{
template <class ContainerAllocator>
struct NewTask_
{
  typedef NewTask_<ContainerAllocator> Type;

  NewTask_()
    : header()
    , machineName()
    , robotName()
    , destinationName()
    , taskDeadline(0)
    , taskType(0)
    , taskStatus(0)
    , taskMaterialType(0)  {
    }
  NewTask_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , machineName(_alloc)
    , robotName(_alloc)
    , destinationName(_alloc)
    , taskDeadline(0)
    , taskType(0)
    , taskStatus(0)
    , taskMaterialType(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _machineName_type;
  _machineName_type machineName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotName_type;
  _robotName_type robotName;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destinationName_type;
  _destinationName_type destinationName;

   typedef uint16_t _taskDeadline_type;
  _taskDeadline_type taskDeadline;

   typedef uint16_t _taskType_type;
  _taskType_type taskType;

   typedef uint16_t _taskStatus_type;
  _taskStatus_type taskStatus;

   typedef uint16_t _taskMaterialType_type;
  _taskMaterialType_type taskMaterialType;


    enum { REPLENISHMENT = 1u };
     enum { DELIVERY = 2u };
     enum { GOTO = 3u };
     enum { CALL = 4u };
     enum { OPEN = 0u };
     enum { WORKING = 1u };
     enum { FINISHED = 2u };
     enum { ERROR = 3u };
     enum { CANCELLED = 4u };
     enum { typeA = 1u };
     enum { typeB = 2u };
 

  typedef boost::shared_ptr< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> const> ConstPtr;

}; // struct NewTask_

typedef ::kobuki_fleet_msgs::NewTask_<std::allocator<void> > NewTask;

typedef boost::shared_ptr< ::kobuki_fleet_msgs::NewTask > NewTaskPtr;
typedef boost::shared_ptr< ::kobuki_fleet_msgs::NewTask const> NewTaskConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kobuki_fleet_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'kobuki_fleet_msgs': ['/home/odroid/car-whisper/src/kobuki_fleet/kobuki_fleet_msgs/msg', '/home/odroid/car-whisper/devel/share/kobuki_fleet_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55c9514b00d94f83e82ab03e265be429";
  }

  static const char* value(const ::kobuki_fleet_msgs::NewTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55c9514b00d94f83ULL;
  static const uint64_t static_value2 = 0xe82ab03e265be429ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kobuki_fleet_msgs/NewTask";
  }

  static const char* value(const ::kobuki_fleet_msgs::NewTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string machineName\n\
string robotName\n\
string destinationName\n\
uint16 taskDeadline    \n\
\n\
uint16 REPLENISHMENT=1\n\
uint16 DELIVERY=2\n\
uint16 GOTO=3\n\
uint16 CALL=4\n\
uint16 taskType     \n\
\n\
uint16 taskStatus\n\
uint16 OPEN=0\n\
uint16 WORKING=1\n\
uint16 FINISHED=2\n\
uint16 ERROR=3\n\
uint16 CANCELLED=4\n\
\n\
uint16 taskMaterialType\n\
uint16 typeA=1\n\
uint16 typeB=2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::kobuki_fleet_msgs::NewTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.machineName);
      stream.next(m.robotName);
      stream.next(m.destinationName);
      stream.next(m.taskDeadline);
      stream.next(m.taskType);
      stream.next(m.taskStatus);
      stream.next(m.taskMaterialType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct NewTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_fleet_msgs::NewTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kobuki_fleet_msgs::NewTask_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "machineName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.machineName);
    s << indent << "robotName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robotName);
    s << indent << "destinationName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destinationName);
    s << indent << "taskDeadline: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.taskDeadline);
    s << indent << "taskType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.taskType);
    s << indent << "taskStatus: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.taskStatus);
    s << indent << "taskMaterialType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.taskMaterialType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOBUKI_FLEET_MSGS_MESSAGE_NEWTASK_H
