// Generated by gencpp from file neocortec/neocortecSendDataRequest.msg
// DO NOT EDIT!


#ifndef NEOCORTEC_MESSAGE_NEOCORTECSENDDATAREQUEST_H
#define NEOCORTEC_MESSAGE_NEOCORTECSENDDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neocortec
{
template <class ContainerAllocator>
struct neocortecSendDataRequest_
{
  typedef neocortecSendDataRequest_<ContainerAllocator> Type;

  neocortecSendDataRequest_()
    : nodeId(0)
    , port(0)
    , data()  {
    }
  neocortecSendDataRequest_(const ContainerAllocator& _alloc)
    : nodeId(0)
    , port(0)
    , data(_alloc)  {
    }



   typedef uint8_t _nodeId_type;
  _nodeId_type nodeId;

   typedef uint8_t _port_type;
  _port_type port;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct neocortecSendDataRequest_

typedef ::neocortec::neocortecSendDataRequest_<std::allocator<void> > neocortecSendDataRequest;

typedef boost::shared_ptr< ::neocortec::neocortecSendDataRequest > neocortecSendDataRequestPtr;
typedef boost::shared_ptr< ::neocortec::neocortecSendDataRequest const> neocortecSendDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neocortec::neocortecSendDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace neocortec

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'neocortec': ['/home/odroid/car-whisper/src/kobuki_fleet/neocortec/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fab3294508136de3f323f190efbc52a";
  }

  static const char* value(const ::neocortec::neocortecSendDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fab3294508136deULL;
  static const uint64_t static_value2 = 0x3f323f190efbc52aULL;
};

template<class ContainerAllocator>
struct DataType< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neocortec/neocortecSendDataRequest";
  }

  static const char* value(const ::neocortec::neocortecSendDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 nodeId\n\
uint8 port\n\
uint8[] data\n\
";
  }

  static const char* value(const ::neocortec::neocortecSendDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeId);
      stream.next(m.port);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct neocortecSendDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neocortec::neocortecSendDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neocortec::neocortecSendDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "nodeId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nodeId);
    s << indent << "port: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.port);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEOCORTEC_MESSAGE_NEOCORTECSENDDATAREQUEST_H
