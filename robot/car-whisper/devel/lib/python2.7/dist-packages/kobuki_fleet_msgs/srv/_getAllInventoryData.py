# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/getAllInventoryDataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class getAllInventoryDataRequest(genpy.Message):
  _md5sum = "00ef7ef8c04feb98bbb45b163f0a38ef"
  _type = "kobuki_fleet_msgs/getAllInventoryDataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Bool start

================================================================================
MSG: std_msgs/Bool
bool data
"""
  __slots__ = ['start']
  _slot_types = ['std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getAllInventoryDataRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = std_msgs.msg.Bool()
    else:
      self.start = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.start.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.start.data,) = _struct_B.unpack(str[start:end])
      self.start.data = bool(self.start.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.start.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.start.data,) = _struct_B.unpack(str[start:end])
      self.start.data = bool(self.start.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/getAllInventoryDataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import kobuki_fleet_msgs.msg
import std_msgs.msg

class getAllInventoryDataResponse(genpy.Message):
  _md5sum = "1638b4ed519c51a59ec936b308f3253e"
  _type = "kobuki_fleet_msgs/getAllInventoryDataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """kobuki_fleet_msgs/LocationIdentifier[] locations
std_msgs/Bool finished

================================================================================
MSG: kobuki_fleet_msgs/LocationIdentifier
# Location types
uint8    SC    = 1  # Source
uint8    MA    = 2  # Machine
uint8    CB    = 3  # Conveyor belt
uint8    WP    = 4  # Way Point (additional navigation goal)
uint8    PP    = 5  # Precision Placement platform
uint8    ROBOT = 6

# The type of location
std_msgs/UInt64 type

# The instance ID of the location (e.g. if there are several shelves)
std_msgs/UInt64  instance_id

# A human-readable description of the location
std_msgs/String  locationDescription

uint8    A    = 1  # Material type A
uint8    B    = 2  # Material type B

# A human-readable description of the material type contained in the localization
std_msgs/Int16  materialType

# A human-readable description of the material type contained in the localization
std_msgs/String  materialDescription

# Pose with position and orientation
geometry_msgs/Pose pose

================================================================================
MSG: std_msgs/UInt64
uint64 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int16
int16 data

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Bool
bool data
"""
  __slots__ = ['locations','finished']
  _slot_types = ['kobuki_fleet_msgs/LocationIdentifier[]','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       locations,finished

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getAllInventoryDataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.locations is None:
        self.locations = []
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
    else:
      self.locations = []
      self.finished = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _v1 = val1.type
        buff.write(_struct_Q.pack(_v1.data))
        _v2 = val1.instance_id
        buff.write(_struct_Q.pack(_v2.data))
        _v3 = val1.locationDescription
        _x = _v3.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = val1.materialType
        buff.write(_struct_h.pack(_v4.data))
        _v5 = val1.materialDescription
        _x = _v5.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v6 = val1.pose
        _v7 = _v6.position
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.orientation
        _x = _v8
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_B.pack(self.finished.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.locations is None:
        self.locations = None
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = kobuki_fleet_msgs.msg.LocationIdentifier()
        _v9 = val1.type
        start = end
        end += 8
        (_v9.data,) = _struct_Q.unpack(str[start:end])
        _v10 = val1.instance_id
        start = end
        end += 8
        (_v10.data,) = _struct_Q.unpack(str[start:end])
        _v11 = val1.locationDescription
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.data = str[start:end].decode('utf-8')
        else:
          _v11.data = str[start:end]
        _v12 = val1.materialType
        start = end
        end += 2
        (_v12.data,) = _struct_h.unpack(str[start:end])
        _v13 = val1.materialDescription
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.data = str[start:end].decode('utf-8')
        else:
          _v13.data = str[start:end]
        _v14 = val1.pose
        _v15 = _v14.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = _v14.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.locations.append(val1)
      start = end
      end += 1
      (self.finished.data,) = _struct_B.unpack(str[start:end])
      self.finished.data = bool(self.finished.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _v17 = val1.type
        buff.write(_struct_Q.pack(_v17.data))
        _v18 = val1.instance_id
        buff.write(_struct_Q.pack(_v18.data))
        _v19 = val1.locationDescription
        _x = _v19.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v20 = val1.materialType
        buff.write(_struct_h.pack(_v20.data))
        _v21 = val1.materialDescription
        _x = _v21.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v22 = val1.pose
        _v23 = _v22.position
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v24 = _v22.orientation
        _x = _v24
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_B.pack(self.finished.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.locations is None:
        self.locations = None
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = kobuki_fleet_msgs.msg.LocationIdentifier()
        _v25 = val1.type
        start = end
        end += 8
        (_v25.data,) = _struct_Q.unpack(str[start:end])
        _v26 = val1.instance_id
        start = end
        end += 8
        (_v26.data,) = _struct_Q.unpack(str[start:end])
        _v27 = val1.locationDescription
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.data = str[start:end].decode('utf-8')
        else:
          _v27.data = str[start:end]
        _v28 = val1.materialType
        start = end
        end += 2
        (_v28.data,) = _struct_h.unpack(str[start:end])
        _v29 = val1.materialDescription
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.data = str[start:end].decode('utf-8')
        else:
          _v29.data = str[start:end]
        _v30 = val1.pose
        _v31 = _v30.position
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = _v30.orientation
        _x = _v32
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.locations.append(val1)
      start = end
      end += 1
      (self.finished.data,) = _struct_B.unpack(str[start:end])
      self.finished.data = bool(self.finished.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_h = struct.Struct("<h")
_struct_4d = struct.Struct("<4d")
_struct_B = struct.Struct("<B")
_struct_3d = struct.Struct("<3d")
class getAllInventoryData(object):
  _type          = 'kobuki_fleet_msgs/getAllInventoryData'
  _md5sum = 'e657d86d657c974d0013eea9728a2ccb'
  _request_class  = getAllInventoryDataRequest
  _response_class = getAllInventoryDataResponse
