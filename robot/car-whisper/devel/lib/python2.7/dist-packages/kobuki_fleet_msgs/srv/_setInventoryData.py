# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/setInventoryDataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class setInventoryDataRequest(genpy.Message):
  _md5sum = "e77fc914fe8cafd9c5ab79be5c8843d1"
  _type = "kobuki_fleet_msgs/setInventoryDataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Bool start
std_msgs/String object
std_msgs/String actual_station
std_msgs/Float32 station_height
std_msgs/Int16 brightness
std_msgs/Int16 threshold_1
std_msgs/Int16 threshold_2
std_msgs/Int16 filter_size
std_msgs/Int16 filter
sensor_msgs/LaserScan laserScan
geometry_msgs/Pose pose
std_msgs/Int16 material_type

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int16
int16 data

================================================================================
MSG: sensor_msgs/LaserScan
# Single scan from a planar laser range-finder
#
# If you have another ranging device with different behavior (e.g. a sonar
# array), please find or create a different message, since applications
# will make fairly laser-specific assumptions about this data

Header header            # timestamp in the header is the acquisition time of 
                         # the first ray in the scan.
                         #
                         # in frame frame_id, angles are measured around 
                         # the positive Z axis (counterclockwise, if Z is up)
                         # with zero angle being forward along the x axis
                         
float32 angle_min        # start angle of the scan [rad]
float32 angle_max        # end angle of the scan [rad]
float32 angle_increment  # angular distance between measurements [rad]

float32 time_increment   # time between measurements [seconds] - if your scanner
                         # is moving, this will be used in interpolating position
                         # of 3d points
float32 scan_time        # time between scans [seconds]

float32 range_min        # minimum range value [m]
float32 range_max        # maximum range value [m]

float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)
float32[] intensities    # intensity data [device-specific units].  If your
                         # device does not provide intensities, please leave
                         # the array empty.

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['start','object','actual_station','station_height','brightness','threshold_1','threshold_2','filter_size','filter','laserScan','pose','material_type']
  _slot_types = ['std_msgs/Bool','std_msgs/String','std_msgs/String','std_msgs/Float32','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','std_msgs/Int16','sensor_msgs/LaserScan','geometry_msgs/Pose','std_msgs/Int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,object,actual_station,station_height,brightness,threshold_1,threshold_2,filter_size,filter,laserScan,pose,material_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(setInventoryDataRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = std_msgs.msg.Bool()
      if self.object is None:
        self.object = std_msgs.msg.String()
      if self.actual_station is None:
        self.actual_station = std_msgs.msg.String()
      if self.station_height is None:
        self.station_height = std_msgs.msg.Float32()
      if self.brightness is None:
        self.brightness = std_msgs.msg.Int16()
      if self.threshold_1 is None:
        self.threshold_1 = std_msgs.msg.Int16()
      if self.threshold_2 is None:
        self.threshold_2 = std_msgs.msg.Int16()
      if self.filter_size is None:
        self.filter_size = std_msgs.msg.Int16()
      if self.filter is None:
        self.filter = std_msgs.msg.Int16()
      if self.laserScan is None:
        self.laserScan = sensor_msgs.msg.LaserScan()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.material_type is None:
        self.material_type = std_msgs.msg.Int16()
    else:
      self.start = std_msgs.msg.Bool()
      self.object = std_msgs.msg.String()
      self.actual_station = std_msgs.msg.String()
      self.station_height = std_msgs.msg.Float32()
      self.brightness = std_msgs.msg.Int16()
      self.threshold_1 = std_msgs.msg.Int16()
      self.threshold_2 = std_msgs.msg.Int16()
      self.filter_size = std_msgs.msg.Int16()
      self.filter = std_msgs.msg.Int16()
      self.laserScan = sensor_msgs.msg.LaserScan()
      self.pose = geometry_msgs.msg.Pose()
      self.material_type = std_msgs.msg.Int16()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.start.data))
      _x = self.object.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actual_station.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f5h3I.pack(_x.station_height.data, _x.brightness.data, _x.threshold_1.data, _x.threshold_2.data, _x.filter_size.data, _x.filter.data, _x.laserScan.header.seq, _x.laserScan.header.stamp.secs, _x.laserScan.header.stamp.nsecs))
      _x = self.laserScan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7f.pack(_x.laserScan.angle_min, _x.laserScan.angle_max, _x.laserScan.angle_increment, _x.laserScan.time_increment, _x.laserScan.scan_time, _x.laserScan.range_min, _x.laserScan.range_max))
      length = len(self.laserScan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.laserScan.ranges))
      length = len(self.laserScan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.laserScan.intensities))
      _x = self
      buff.write(_struct_7dh.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.material_type.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = std_msgs.msg.Bool()
      if self.object is None:
        self.object = std_msgs.msg.String()
      if self.actual_station is None:
        self.actual_station = std_msgs.msg.String()
      if self.station_height is None:
        self.station_height = std_msgs.msg.Float32()
      if self.brightness is None:
        self.brightness = std_msgs.msg.Int16()
      if self.threshold_1 is None:
        self.threshold_1 = std_msgs.msg.Int16()
      if self.threshold_2 is None:
        self.threshold_2 = std_msgs.msg.Int16()
      if self.filter_size is None:
        self.filter_size = std_msgs.msg.Int16()
      if self.filter is None:
        self.filter = std_msgs.msg.Int16()
      if self.laserScan is None:
        self.laserScan = sensor_msgs.msg.LaserScan()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.material_type is None:
        self.material_type = std_msgs.msg.Int16()
      end = 0
      start = end
      end += 1
      (self.start.data,) = _struct_B.unpack(str[start:end])
      self.start.data = bool(self.start.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.data = str[start:end].decode('utf-8')
      else:
        self.object.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actual_station.data = str[start:end].decode('utf-8')
      else:
        self.actual_station.data = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.station_height.data, _x.brightness.data, _x.threshold_1.data, _x.threshold_2.data, _x.filter_size.data, _x.filter.data, _x.laserScan.header.seq, _x.laserScan.header.stamp.secs, _x.laserScan.header.stamp.nsecs,) = _struct_f5h3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laserScan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.laserScan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.laserScan.angle_min, _x.laserScan.angle_max, _x.laserScan.angle_increment, _x.laserScan.time_increment, _x.laserScan.scan_time, _x.laserScan.range_min, _x.laserScan.range_max,) = _struct_7f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan.ranges = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan.intensities = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 58
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.material_type.data,) = _struct_7dh.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.start.data))
      _x = self.object.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.actual_station.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f5h3I.pack(_x.station_height.data, _x.brightness.data, _x.threshold_1.data, _x.threshold_2.data, _x.filter_size.data, _x.filter.data, _x.laserScan.header.seq, _x.laserScan.header.stamp.secs, _x.laserScan.header.stamp.nsecs))
      _x = self.laserScan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7f.pack(_x.laserScan.angle_min, _x.laserScan.angle_max, _x.laserScan.angle_increment, _x.laserScan.time_increment, _x.laserScan.scan_time, _x.laserScan.range_min, _x.laserScan.range_max))
      length = len(self.laserScan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.laserScan.ranges.tostring())
      length = len(self.laserScan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.laserScan.intensities.tostring())
      _x = self
      buff.write(_struct_7dh.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.material_type.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = std_msgs.msg.Bool()
      if self.object is None:
        self.object = std_msgs.msg.String()
      if self.actual_station is None:
        self.actual_station = std_msgs.msg.String()
      if self.station_height is None:
        self.station_height = std_msgs.msg.Float32()
      if self.brightness is None:
        self.brightness = std_msgs.msg.Int16()
      if self.threshold_1 is None:
        self.threshold_1 = std_msgs.msg.Int16()
      if self.threshold_2 is None:
        self.threshold_2 = std_msgs.msg.Int16()
      if self.filter_size is None:
        self.filter_size = std_msgs.msg.Int16()
      if self.filter is None:
        self.filter = std_msgs.msg.Int16()
      if self.laserScan is None:
        self.laserScan = sensor_msgs.msg.LaserScan()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.material_type is None:
        self.material_type = std_msgs.msg.Int16()
      end = 0
      start = end
      end += 1
      (self.start.data,) = _struct_B.unpack(str[start:end])
      self.start.data = bool(self.start.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.data = str[start:end].decode('utf-8')
      else:
        self.object.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actual_station.data = str[start:end].decode('utf-8')
      else:
        self.actual_station.data = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.station_height.data, _x.brightness.data, _x.threshold_1.data, _x.threshold_2.data, _x.filter_size.data, _x.filter.data, _x.laserScan.header.seq, _x.laserScan.header.stamp.secs, _x.laserScan.header.stamp.nsecs,) = _struct_f5h3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laserScan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.laserScan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.laserScan.angle_min, _x.laserScan.angle_max, _x.laserScan.angle_increment, _x.laserScan.time_increment, _x.laserScan.scan_time, _x.laserScan.range_min, _x.laserScan.range_max,) = _struct_7f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan.ranges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan.intensities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 58
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.material_type.data,) = _struct_7dh.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f5h3I = struct.Struct("<f5h3I")
_struct_7f = struct.Struct("<7f")
_struct_B = struct.Struct("<B")
_struct_7dh = struct.Struct("<7dh")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/setInventoryDataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class setInventoryDataResponse(genpy.Message):
  _md5sum = "cf7ed30376b785bc54463c4d803f6b95"
  _type = "kobuki_fleet_msgs/setInventoryDataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Bool finished

================================================================================
MSG: std_msgs/Bool
bool data
"""
  __slots__ = ['finished']
  _slot_types = ['std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       finished

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(setInventoryDataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
    else:
      self.finished = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.finished.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.finished.data,) = _struct_B.unpack(str[start:end])
      self.finished.data = bool(self.finished.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.finished.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.finished is None:
        self.finished = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.finished.data,) = _struct_B.unpack(str[start:end])
      self.finished.data = bool(self.finished.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class setInventoryData(object):
  _type          = 'kobuki_fleet_msgs/setInventoryData'
  _md5sum = '4341bb2b1dafa97b5edbcb56d1fb3a54'
  _request_class  = setInventoryDataRequest
  _response_class = setInventoryDataResponse
