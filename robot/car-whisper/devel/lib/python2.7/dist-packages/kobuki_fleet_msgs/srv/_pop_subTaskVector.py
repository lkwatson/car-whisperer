# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/pop_subTaskVectorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pop_subTaskVectorRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "kobuki_fleet_msgs/pop_subTaskVectorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pop_subTaskVectorRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/pop_subTaskVectorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import kobuki_fleet_msgs.msg
import genpy
import std_msgs.msg

class pop_subTaskVectorResponse(genpy.Message):
  _md5sum = "cdb46408d10f651b07e84467b6434812"
  _type = "kobuki_fleet_msgs/pop_subTaskVectorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """kobuki_fleet_msgs/SubTaskVector subTasks
kobuki_fleet_msgs/Task currentTask
std_msgs/Bool status


================================================================================
MSG: kobuki_fleet_msgs/SubTaskVector
SubTask[] subtasks

================================================================================
MSG: kobuki_fleet_msgs/SubTask
string subTasktType
string serviceArea
uint16 poseOrientation
float32 serviceAreaHigh
geometry_msgs/Pose poseNew
geometry_msgs/Point pose
duration waitingTime
string objectType
uint16 objectId
uint16 object2
uint16 object3
uint16 containerId

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: kobuki_fleet_msgs/Task
Header header
string machineName
string robotName
string robotPrimary
string robotSecondary
string destinationName

string srcName
geometry_msgs/Pose robotPose
geometry_msgs/Pose machinePose
geometry_msgs/Pose srcPose
geometry_msgs/Pose destinationPose

uint16 OPEN=0
uint16 WORKING=1
uint16 FINISHED=2
uint16 ERROR=3
uint16 CANCELLED=4
uint16 ROBOTFINISHED=5
uint16 IDLE=6
uint16 taskStatus

uint16 REPLENISHMENT=1
uint16 DELIVERY=2
uint16 GOTO=3
uint16 CALL=4
uint16 taskType

uint16 typeA=1
uint16 typeB=2
uint16 taskMaterialType


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/Bool
bool data
"""
  __slots__ = ['subTasks','currentTask','status']
  _slot_types = ['kobuki_fleet_msgs/SubTaskVector','kobuki_fleet_msgs/Task','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       subTasks,currentTask,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pop_subTaskVectorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.subTasks is None:
        self.subTasks = kobuki_fleet_msgs.msg.SubTaskVector()
      if self.currentTask is None:
        self.currentTask = kobuki_fleet_msgs.msg.Task()
      if self.status is None:
        self.status = std_msgs.msg.Bool()
    else:
      self.subTasks = kobuki_fleet_msgs.msg.SubTaskVector()
      self.currentTask = kobuki_fleet_msgs.msg.Task()
      self.status = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.subTasks.subtasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.subTasks.subtasks:
        _x = val1.subTasktType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.serviceArea
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Hf.pack(_x.poseOrientation, _x.serviceAreaHigh))
        _v1 = val1.poseNew
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.pose
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.waitingTime
        _x = _v5
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _x = val1.objectType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4H.pack(_x.objectId, _x.object2, _x.object3, _x.containerId))
      _x = self
      buff.write(_struct_3I.pack(_x.currentTask.header.seq, _x.currentTask.header.stamp.secs, _x.currentTask.header.stamp.nsecs))
      _x = self.currentTask.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.machineName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotPrimary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotSecondary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.destinationName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.srcName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_28d3HB.pack(_x.currentTask.robotPose.position.x, _x.currentTask.robotPose.position.y, _x.currentTask.robotPose.position.z, _x.currentTask.robotPose.orientation.x, _x.currentTask.robotPose.orientation.y, _x.currentTask.robotPose.orientation.z, _x.currentTask.robotPose.orientation.w, _x.currentTask.machinePose.position.x, _x.currentTask.machinePose.position.y, _x.currentTask.machinePose.position.z, _x.currentTask.machinePose.orientation.x, _x.currentTask.machinePose.orientation.y, _x.currentTask.machinePose.orientation.z, _x.currentTask.machinePose.orientation.w, _x.currentTask.srcPose.position.x, _x.currentTask.srcPose.position.y, _x.currentTask.srcPose.position.z, _x.currentTask.srcPose.orientation.x, _x.currentTask.srcPose.orientation.y, _x.currentTask.srcPose.orientation.z, _x.currentTask.srcPose.orientation.w, _x.currentTask.destinationPose.position.x, _x.currentTask.destinationPose.position.y, _x.currentTask.destinationPose.position.z, _x.currentTask.destinationPose.orientation.x, _x.currentTask.destinationPose.orientation.y, _x.currentTask.destinationPose.orientation.z, _x.currentTask.destinationPose.orientation.w, _x.currentTask.taskStatus, _x.currentTask.taskType, _x.currentTask.taskMaterialType, _x.status.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.subTasks is None:
        self.subTasks = kobuki_fleet_msgs.msg.SubTaskVector()
      if self.currentTask is None:
        self.currentTask = kobuki_fleet_msgs.msg.Task()
      if self.status is None:
        self.status = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subTasks.subtasks = []
      for i in range(0, length):
        val1 = kobuki_fleet_msgs.msg.SubTask()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subTasktType = str[start:end].decode('utf-8')
        else:
          val1.subTasktType = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.serviceArea = str[start:end].decode('utf-8')
        else:
          val1.serviceArea = str[start:end]
        _x = val1
        start = end
        end += 6
        (_x.poseOrientation, _x.serviceAreaHigh,) = _struct_Hf.unpack(str[start:end])
        _v6 = val1.poseNew
        _v7 = _v6.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = _v6.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v9 = val1.pose
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v10 = val1.waitingTime
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.objectType = str[start:end].decode('utf-8')
        else:
          val1.objectType = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.objectId, _x.object2, _x.object3, _x.containerId,) = _struct_4H.unpack(str[start:end])
        self.subTasks.subtasks.append(val1)
      _x = self
      start = end
      end += 12
      (_x.currentTask.header.seq, _x.currentTask.header.stamp.secs, _x.currentTask.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.currentTask.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.machineName = str[start:end].decode('utf-8')
      else:
        self.currentTask.machineName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotName = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotPrimary = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotPrimary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotSecondary = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotSecondary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.destinationName = str[start:end].decode('utf-8')
      else:
        self.currentTask.destinationName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.srcName = str[start:end].decode('utf-8')
      else:
        self.currentTask.srcName = str[start:end]
      _x = self
      start = end
      end += 231
      (_x.currentTask.robotPose.position.x, _x.currentTask.robotPose.position.y, _x.currentTask.robotPose.position.z, _x.currentTask.robotPose.orientation.x, _x.currentTask.robotPose.orientation.y, _x.currentTask.robotPose.orientation.z, _x.currentTask.robotPose.orientation.w, _x.currentTask.machinePose.position.x, _x.currentTask.machinePose.position.y, _x.currentTask.machinePose.position.z, _x.currentTask.machinePose.orientation.x, _x.currentTask.machinePose.orientation.y, _x.currentTask.machinePose.orientation.z, _x.currentTask.machinePose.orientation.w, _x.currentTask.srcPose.position.x, _x.currentTask.srcPose.position.y, _x.currentTask.srcPose.position.z, _x.currentTask.srcPose.orientation.x, _x.currentTask.srcPose.orientation.y, _x.currentTask.srcPose.orientation.z, _x.currentTask.srcPose.orientation.w, _x.currentTask.destinationPose.position.x, _x.currentTask.destinationPose.position.y, _x.currentTask.destinationPose.position.z, _x.currentTask.destinationPose.orientation.x, _x.currentTask.destinationPose.orientation.y, _x.currentTask.destinationPose.orientation.z, _x.currentTask.destinationPose.orientation.w, _x.currentTask.taskStatus, _x.currentTask.taskType, _x.currentTask.taskMaterialType, _x.status.data,) = _struct_28d3HB.unpack(str[start:end])
      self.status.data = bool(self.status.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.subTasks.subtasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.subTasks.subtasks:
        _x = val1.subTasktType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.serviceArea
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Hf.pack(_x.poseOrientation, _x.serviceAreaHigh))
        _v11 = val1.poseNew
        _v12 = _v11.position
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = _v11.orientation
        _x = _v13
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v14 = val1.pose
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v15 = val1.waitingTime
        _x = _v15
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _x = val1.objectType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4H.pack(_x.objectId, _x.object2, _x.object3, _x.containerId))
      _x = self
      buff.write(_struct_3I.pack(_x.currentTask.header.seq, _x.currentTask.header.stamp.secs, _x.currentTask.header.stamp.nsecs))
      _x = self.currentTask.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.machineName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotPrimary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.robotSecondary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.destinationName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentTask.srcName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_28d3HB.pack(_x.currentTask.robotPose.position.x, _x.currentTask.robotPose.position.y, _x.currentTask.robotPose.position.z, _x.currentTask.robotPose.orientation.x, _x.currentTask.robotPose.orientation.y, _x.currentTask.robotPose.orientation.z, _x.currentTask.robotPose.orientation.w, _x.currentTask.machinePose.position.x, _x.currentTask.machinePose.position.y, _x.currentTask.machinePose.position.z, _x.currentTask.machinePose.orientation.x, _x.currentTask.machinePose.orientation.y, _x.currentTask.machinePose.orientation.z, _x.currentTask.machinePose.orientation.w, _x.currentTask.srcPose.position.x, _x.currentTask.srcPose.position.y, _x.currentTask.srcPose.position.z, _x.currentTask.srcPose.orientation.x, _x.currentTask.srcPose.orientation.y, _x.currentTask.srcPose.orientation.z, _x.currentTask.srcPose.orientation.w, _x.currentTask.destinationPose.position.x, _x.currentTask.destinationPose.position.y, _x.currentTask.destinationPose.position.z, _x.currentTask.destinationPose.orientation.x, _x.currentTask.destinationPose.orientation.y, _x.currentTask.destinationPose.orientation.z, _x.currentTask.destinationPose.orientation.w, _x.currentTask.taskStatus, _x.currentTask.taskType, _x.currentTask.taskMaterialType, _x.status.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.subTasks is None:
        self.subTasks = kobuki_fleet_msgs.msg.SubTaskVector()
      if self.currentTask is None:
        self.currentTask = kobuki_fleet_msgs.msg.Task()
      if self.status is None:
        self.status = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subTasks.subtasks = []
      for i in range(0, length):
        val1 = kobuki_fleet_msgs.msg.SubTask()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.subTasktType = str[start:end].decode('utf-8')
        else:
          val1.subTasktType = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.serviceArea = str[start:end].decode('utf-8')
        else:
          val1.serviceArea = str[start:end]
        _x = val1
        start = end
        end += 6
        (_x.poseOrientation, _x.serviceAreaHigh,) = _struct_Hf.unpack(str[start:end])
        _v16 = val1.poseNew
        _v17 = _v16.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v18 = _v16.orientation
        _x = _v18
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v19 = val1.pose
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v20 = val1.waitingTime
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.objectType = str[start:end].decode('utf-8')
        else:
          val1.objectType = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.objectId, _x.object2, _x.object3, _x.containerId,) = _struct_4H.unpack(str[start:end])
        self.subTasks.subtasks.append(val1)
      _x = self
      start = end
      end += 12
      (_x.currentTask.header.seq, _x.currentTask.header.stamp.secs, _x.currentTask.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.currentTask.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.machineName = str[start:end].decode('utf-8')
      else:
        self.currentTask.machineName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotName = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotPrimary = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotPrimary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.robotSecondary = str[start:end].decode('utf-8')
      else:
        self.currentTask.robotSecondary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.destinationName = str[start:end].decode('utf-8')
      else:
        self.currentTask.destinationName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentTask.srcName = str[start:end].decode('utf-8')
      else:
        self.currentTask.srcName = str[start:end]
      _x = self
      start = end
      end += 231
      (_x.currentTask.robotPose.position.x, _x.currentTask.robotPose.position.y, _x.currentTask.robotPose.position.z, _x.currentTask.robotPose.orientation.x, _x.currentTask.robotPose.orientation.y, _x.currentTask.robotPose.orientation.z, _x.currentTask.robotPose.orientation.w, _x.currentTask.machinePose.position.x, _x.currentTask.machinePose.position.y, _x.currentTask.machinePose.position.z, _x.currentTask.machinePose.orientation.x, _x.currentTask.machinePose.orientation.y, _x.currentTask.machinePose.orientation.z, _x.currentTask.machinePose.orientation.w, _x.currentTask.srcPose.position.x, _x.currentTask.srcPose.position.y, _x.currentTask.srcPose.position.z, _x.currentTask.srcPose.orientation.x, _x.currentTask.srcPose.orientation.y, _x.currentTask.srcPose.orientation.z, _x.currentTask.srcPose.orientation.w, _x.currentTask.destinationPose.position.x, _x.currentTask.destinationPose.position.y, _x.currentTask.destinationPose.position.z, _x.currentTask.destinationPose.orientation.x, _x.currentTask.destinationPose.orientation.y, _x.currentTask.destinationPose.orientation.z, _x.currentTask.destinationPose.orientation.w, _x.currentTask.taskStatus, _x.currentTask.taskType, _x.currentTask.taskMaterialType, _x.status.data,) = _struct_28d3HB.unpack(str[start:end])
      self.status.data = bool(self.status.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_28d3HB = struct.Struct("<28d3HB")
_struct_3I = struct.Struct("<3I")
_struct_4H = struct.Struct("<4H")
_struct_4d = struct.Struct("<4d")
_struct_Hf = struct.Struct("<Hf")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
class pop_subTaskVector(object):
  _type          = 'kobuki_fleet_msgs/pop_subTaskVector'
  _md5sum = 'cdb46408d10f651b07e84467b6434812'
  _request_class  = pop_subTaskVectorRequest
  _response_class = pop_subTaskVectorResponse
