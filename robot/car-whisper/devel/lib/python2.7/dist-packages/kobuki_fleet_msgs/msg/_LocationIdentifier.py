# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/LocationIdentifier.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class LocationIdentifier(genpy.Message):
  _md5sum = "a06bbdeb31528346ad4d8dbf64743457"
  _type = "kobuki_fleet_msgs/LocationIdentifier"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Location types
uint8    SC    = 1  # Source
uint8    MA    = 2  # Machine
uint8    CB    = 3  # Conveyor belt
uint8    WP    = 4  # Way Point (additional navigation goal)
uint8    PP    = 5  # Precision Placement platform
uint8    ROBOT = 6

# The type of location
std_msgs/UInt64 type

# The instance ID of the location (e.g. if there are several shelves)
std_msgs/UInt64  instance_id

# A human-readable description of the location
std_msgs/String  locationDescription

uint8    A    = 1  # Material type A
uint8    B    = 2  # Material type B

# A human-readable description of the material type contained in the localization
std_msgs/Int16  materialType

# A human-readable description of the material type contained in the localization
std_msgs/String  materialDescription

# Pose with position and orientation
geometry_msgs/Pose pose

================================================================================
MSG: std_msgs/UInt64
uint64 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Int16
int16 data

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  SC = 1
  MA = 2
  CB = 3
  WP = 4
  PP = 5
  ROBOT = 6
  A = 1
  B = 2

  __slots__ = ['type','instance_id','locationDescription','materialType','materialDescription','pose']
  _slot_types = ['std_msgs/UInt64','std_msgs/UInt64','std_msgs/String','std_msgs/Int16','std_msgs/String','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,instance_id,locationDescription,materialType,materialDescription,pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocationIdentifier, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = std_msgs.msg.UInt64()
      if self.instance_id is None:
        self.instance_id = std_msgs.msg.UInt64()
      if self.locationDescription is None:
        self.locationDescription = std_msgs.msg.String()
      if self.materialType is None:
        self.materialType = std_msgs.msg.Int16()
      if self.materialDescription is None:
        self.materialDescription = std_msgs.msg.String()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
    else:
      self.type = std_msgs.msg.UInt64()
      self.instance_id = std_msgs.msg.UInt64()
      self.locationDescription = std_msgs.msg.String()
      self.materialType = std_msgs.msg.Int16()
      self.materialDescription = std_msgs.msg.String()
      self.pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Q.pack(_x.type.data, _x.instance_id.data))
      _x = self.locationDescription.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_h.pack(self.materialType.data))
      _x = self.materialDescription.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.type is None:
        self.type = std_msgs.msg.UInt64()
      if self.instance_id is None:
        self.instance_id = std_msgs.msg.UInt64()
      if self.locationDescription is None:
        self.locationDescription = std_msgs.msg.String()
      if self.materialType is None:
        self.materialType = std_msgs.msg.Int16()
      if self.materialDescription is None:
        self.materialDescription = std_msgs.msg.String()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.type.data, _x.instance_id.data,) = _struct_2Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locationDescription.data = str[start:end].decode('utf-8')
      else:
        self.locationDescription.data = str[start:end]
      start = end
      end += 2
      (self.materialType.data,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.materialDescription.data = str[start:end].decode('utf-8')
      else:
        self.materialDescription.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Q.pack(_x.type.data, _x.instance_id.data))
      _x = self.locationDescription.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_h.pack(self.materialType.data))
      _x = self.materialDescription.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.type is None:
        self.type = std_msgs.msg.UInt64()
      if self.instance_id is None:
        self.instance_id = std_msgs.msg.UInt64()
      if self.locationDescription is None:
        self.locationDescription = std_msgs.msg.String()
      if self.materialType is None:
        self.materialType = std_msgs.msg.Int16()
      if self.materialDescription is None:
        self.materialDescription = std_msgs.msg.String()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.type.data, _x.instance_id.data,) = _struct_2Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.locationDescription.data = str[start:end].decode('utf-8')
      else:
        self.locationDescription.data = str[start:end]
      start = end
      end += 2
      (self.materialType.data,) = _struct_h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.materialDescription.data = str[start:end].decode('utf-8')
      else:
        self.materialDescription.data = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_7d = struct.Struct("<7d")
_struct_2Q = struct.Struct("<2Q")
