# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kobuki_fleet_msgs/Task.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Task(genpy.Message):
  _md5sum = "62acc2d4ffe704581b02423c663c6419"
  _type = "kobuki_fleet_msgs/Task"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string machineName
string robotName
string robotPrimary
string robotSecondary
string destinationName

string srcName
geometry_msgs/Pose robotPose
geometry_msgs/Pose machinePose
geometry_msgs/Pose srcPose
geometry_msgs/Pose destinationPose

uint16 OPEN=0
uint16 WORKING=1
uint16 FINISHED=2
uint16 ERROR=3
uint16 CANCELLED=4
uint16 ROBOTFINISHED=5
uint16 IDLE=6
uint16 taskStatus

uint16 REPLENISHMENT=1
uint16 DELIVERY=2
uint16 GOTO=3
uint16 CALL=4
uint16 taskType

uint16 typeA=1
uint16 typeB=2
uint16 taskMaterialType


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  OPEN = 0
  WORKING = 1
  FINISHED = 2
  ERROR = 3
  CANCELLED = 4
  ROBOTFINISHED = 5
  IDLE = 6
  REPLENISHMENT = 1
  DELIVERY = 2
  GOTO = 3
  CALL = 4
  typeA = 1
  typeB = 2

  __slots__ = ['header','machineName','robotName','robotPrimary','robotSecondary','destinationName','srcName','robotPose','machinePose','srcPose','destinationPose','taskStatus','taskType','taskMaterialType']
  _slot_types = ['std_msgs/Header','string','string','string','string','string','string','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,machineName,robotName,robotPrimary,robotSecondary,destinationName,srcName,robotPose,machinePose,srcPose,destinationPose,taskStatus,taskType,taskMaterialType

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Task, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.machineName is None:
        self.machineName = ''
      if self.robotName is None:
        self.robotName = ''
      if self.robotPrimary is None:
        self.robotPrimary = ''
      if self.robotSecondary is None:
        self.robotSecondary = ''
      if self.destinationName is None:
        self.destinationName = ''
      if self.srcName is None:
        self.srcName = ''
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.machinePose is None:
        self.machinePose = geometry_msgs.msg.Pose()
      if self.srcPose is None:
        self.srcPose = geometry_msgs.msg.Pose()
      if self.destinationPose is None:
        self.destinationPose = geometry_msgs.msg.Pose()
      if self.taskStatus is None:
        self.taskStatus = 0
      if self.taskType is None:
        self.taskType = 0
      if self.taskMaterialType is None:
        self.taskMaterialType = 0
    else:
      self.header = std_msgs.msg.Header()
      self.machineName = ''
      self.robotName = ''
      self.robotPrimary = ''
      self.robotSecondary = ''
      self.destinationName = ''
      self.srcName = ''
      self.robotPose = geometry_msgs.msg.Pose()
      self.machinePose = geometry_msgs.msg.Pose()
      self.srcPose = geometry_msgs.msg.Pose()
      self.destinationPose = geometry_msgs.msg.Pose()
      self.taskStatus = 0
      self.taskType = 0
      self.taskMaterialType = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.machineName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotPrimary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotSecondary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.destinationName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.srcName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_28d3H.pack(_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.machinePose.position.x, _x.machinePose.position.y, _x.machinePose.position.z, _x.machinePose.orientation.x, _x.machinePose.orientation.y, _x.machinePose.orientation.z, _x.machinePose.orientation.w, _x.srcPose.position.x, _x.srcPose.position.y, _x.srcPose.position.z, _x.srcPose.orientation.x, _x.srcPose.orientation.y, _x.srcPose.orientation.z, _x.srcPose.orientation.w, _x.destinationPose.position.x, _x.destinationPose.position.y, _x.destinationPose.position.z, _x.destinationPose.orientation.x, _x.destinationPose.orientation.y, _x.destinationPose.orientation.z, _x.destinationPose.orientation.w, _x.taskStatus, _x.taskType, _x.taskMaterialType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.machinePose is None:
        self.machinePose = geometry_msgs.msg.Pose()
      if self.srcPose is None:
        self.srcPose = geometry_msgs.msg.Pose()
      if self.destinationPose is None:
        self.destinationPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.machineName = str[start:end].decode('utf-8')
      else:
        self.machineName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotName = str[start:end].decode('utf-8')
      else:
        self.robotName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotPrimary = str[start:end].decode('utf-8')
      else:
        self.robotPrimary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotSecondary = str[start:end].decode('utf-8')
      else:
        self.robotSecondary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.destinationName = str[start:end].decode('utf-8')
      else:
        self.destinationName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.srcName = str[start:end].decode('utf-8')
      else:
        self.srcName = str[start:end]
      _x = self
      start = end
      end += 230
      (_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.machinePose.position.x, _x.machinePose.position.y, _x.machinePose.position.z, _x.machinePose.orientation.x, _x.machinePose.orientation.y, _x.machinePose.orientation.z, _x.machinePose.orientation.w, _x.srcPose.position.x, _x.srcPose.position.y, _x.srcPose.position.z, _x.srcPose.orientation.x, _x.srcPose.orientation.y, _x.srcPose.orientation.z, _x.srcPose.orientation.w, _x.destinationPose.position.x, _x.destinationPose.position.y, _x.destinationPose.position.z, _x.destinationPose.orientation.x, _x.destinationPose.orientation.y, _x.destinationPose.orientation.z, _x.destinationPose.orientation.w, _x.taskStatus, _x.taskType, _x.taskMaterialType,) = _struct_28d3H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.machineName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotPrimary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robotSecondary
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.destinationName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.srcName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_28d3H.pack(_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.machinePose.position.x, _x.machinePose.position.y, _x.machinePose.position.z, _x.machinePose.orientation.x, _x.machinePose.orientation.y, _x.machinePose.orientation.z, _x.machinePose.orientation.w, _x.srcPose.position.x, _x.srcPose.position.y, _x.srcPose.position.z, _x.srcPose.orientation.x, _x.srcPose.orientation.y, _x.srcPose.orientation.z, _x.srcPose.orientation.w, _x.destinationPose.position.x, _x.destinationPose.position.y, _x.destinationPose.position.z, _x.destinationPose.orientation.x, _x.destinationPose.orientation.y, _x.destinationPose.orientation.z, _x.destinationPose.orientation.w, _x.taskStatus, _x.taskType, _x.taskMaterialType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robotPose is None:
        self.robotPose = geometry_msgs.msg.Pose()
      if self.machinePose is None:
        self.machinePose = geometry_msgs.msg.Pose()
      if self.srcPose is None:
        self.srcPose = geometry_msgs.msg.Pose()
      if self.destinationPose is None:
        self.destinationPose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.machineName = str[start:end].decode('utf-8')
      else:
        self.machineName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotName = str[start:end].decode('utf-8')
      else:
        self.robotName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotPrimary = str[start:end].decode('utf-8')
      else:
        self.robotPrimary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robotSecondary = str[start:end].decode('utf-8')
      else:
        self.robotSecondary = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.destinationName = str[start:end].decode('utf-8')
      else:
        self.destinationName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.srcName = str[start:end].decode('utf-8')
      else:
        self.srcName = str[start:end]
      _x = self
      start = end
      end += 230
      (_x.robotPose.position.x, _x.robotPose.position.y, _x.robotPose.position.z, _x.robotPose.orientation.x, _x.robotPose.orientation.y, _x.robotPose.orientation.z, _x.robotPose.orientation.w, _x.machinePose.position.x, _x.machinePose.position.y, _x.machinePose.position.z, _x.machinePose.orientation.x, _x.machinePose.orientation.y, _x.machinePose.orientation.z, _x.machinePose.orientation.w, _x.srcPose.position.x, _x.srcPose.position.y, _x.srcPose.position.z, _x.srcPose.orientation.x, _x.srcPose.orientation.y, _x.srcPose.orientation.z, _x.srcPose.orientation.w, _x.destinationPose.position.x, _x.destinationPose.position.y, _x.destinationPose.position.z, _x.destinationPose.orientation.x, _x.destinationPose.orientation.y, _x.destinationPose.orientation.z, _x.destinationPose.orientation.w, _x.taskStatus, _x.taskType, _x.taskMaterialType,) = _struct_28d3H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_28d3H = struct.Struct("<28d3H")
